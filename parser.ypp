%{
   #include "attributes.hpp"
   #include "bp.hpp"
	#define YYERROR_VERBOSE 1
	#define YYDEBUG 1
	#include "hw3_output.hpp"
	#include "varsSymbolsTable.h"
	#include "enums.h"
	#include "statement.h"
	using namespace std;
	using namespace output;
	extern int yylineno;
	extern int yylex();
	int yyerror(const char * message);
	FuncSymbolsTable* FuncSymbolsTable_t;
	VarsSymbolsTable* VarsSymbolsTable_t;
	#define PPP printf("line number %d \n", __LINE__);
%}

%token LBRACE
%token RBRACE
%token VOID
%token INT
%token BYTE
%token B
%token BOOL
%token SET

%token TRUE
//%token <bo> TRUE

%token FALSE
//%token <bo> FALSE

%token RETURN
%token IF
%token WHILE

%token BREAK
//%token <str> BREAK

%token CONTINUE
//%token <str> CONTINUE

%token SC
%token COMMA
%token DOTS
%token ID
//%token <str> ID
%token NUM
//%token <num> NUM
%token STRING
%token SPACE
%token ERROR_CHAR



%right ASSIGN
%left OR
%left AND

%left RELOP_EQ_2L
%nonassoc RELOP_GT_1N

%nonassoc RELOP_IN

%left BINOP_ADD_L2
%left BINOP_MUL_L1
%left NOT

%left LPAREN
%left RPAREN
%nonassoc ELSE
%left LBRACKET
%left RBRACKET



//%type <exp> Exp
//%type <type> Type
//%type <type> Call
//%type <type> RetType
//%type <varsVec> Formals
//%type <varsVec> FormalsList
//%type <varsVec> FormalDecl
//%type <typesVec> ExpList
//%token <bo> TRUE
//%token <bo> FALSE
//%token <str> BREAK
//%token <str> CONTINUE
//%token <str> ID
//%token <num> NUM


// %destructor { delete $$; } BREAK CONTINUE ID
// %destructor { delete $$; } Exp
// %destructor { delete $$; } Formals
// %destructor { delete $$; } ExpList



%%

Program :      Global Funcs CGlobal														{}

Global:        /*epsilon*/	                                                {FuncSymbolsTable_t = new FuncSymbolsTable();
																										VarsSymbolsTable_t = new VarsSymbolsTable();
																										VarsSymbolsTable_t->setFuncsTable(FuncSymbolsTable_t);
																										VarsSymbolsTable_t->addFirstScope();
																										printGlobalFuncs();
																										}

CGlobal:       /*epsilon*/	                                                {VarsSymbolsTable_t->deleteScope(true);
																										delete VarsSymbolsTable_t;
																										delete FuncSymbolsTable_t;
																										CodeBuffer::instance().printGlobalBuffer();
																										CodeBuffer::instance().printCodeBuffer();
																										}


Funcs :        /*epsilon*/													         	{}
                  | FuncDecl Funcs									         		{}

FuncDecl :     RetType ID LPAREN Formals RPAREN LBRACE                     {VarsSymbolsTable_t->addScopeFromFunc(*($2->str), $4->varsVec, $1->type);
                                                                            FuncSymbolsTable_t->addFunc(*($2->str), $4->varsVec, $1->type, VarsSymbolsTable_t);}

                   Statements N M RBRACE CScope	                           {FuncSymbolsTable::afterFunc($1->type);
                                                                            CodeBuffer::instance().bpatch($8->statement.next_list, *($10->str));
                                                                            CodeBuffer::instance().bpatch($9->statement.next_list, *($10->str));}

RetType :      Type														               {$$->type = $1->type;}
                  |  VOID												               {$$ = new utype(Types_enum::VOID_TYPE);}

Formals :      /*epsilon*/													            {$$ = new utype(std::vector<Var>());}
                  | FormalsList										              	{$$->varsVec = $1->varsVec;}

FormalsList : 	FormalDecl												              	{$$->varsVec = $1->varsVec;}
                  | FormalDecl COMMA FormalsList				     				{$3->varsVec.push_back($1->varsVec.at(0));
																										$$->varsVec = $3->varsVec;}

FormalDecl : 	Type ID													               {$$->varsVec = std::vector<Var>(1, Var(*($2->str), $1->type));}

Statements :    Statement											              	   {$$ = $1;}
                  | Statements N M Statement							            {$$ = new utype(Statement_c::combineStatements($1->statement, *($3->str), $4->statement));
                                                                             CodeBuffer::instance().bpatch($2->statement.next_list, *($3->str));}

Statement : 	LBRACE OScope Statements CScope RBRACE							   {$$ = $3;}
                  | Type ID SC										              	{VarsSymbolsTable_t->addVar(*($2->str), $1->type);
                                                                              $$ = new utype();}
                  | Type ID ASSIGN Exp SC							              	{$4->exp.typeCheck($1->type);
                                                                            VarsSymbolsTable_t->addVarWithExp(*($2->str), $1->type, $4->exp);
                                                                              $$ = new utype();}
                  | ID ASSIGN Exp SC								              	{VarsSymbolsTable_t->typeCheckAndAssign(*($1->str), $3->exp);
                                                                              $$ = new utype();}
                  | Call SC											              	{$$ = new utype();}
                  | RETURN SC											              	{VarsSymbolsTable_t->checkRetType(Types(Types_enum::VOID_TYPE));
                                                                             FuncSymbolsTable::printRet(Types(Types_enum::VOID_TYPE));
                                                                              $$ = new utype();}
                  | RETURN Exp SC									           		{VarsSymbolsTable_t->checkRetType($2->exp.type);
                                                                              FuncSymbolsTable::returnExp($2->exp);
                                                                              $$ = new utype();}
                  | IfStart RPAREN OScope M Statement CScope				                           {$$ = new utype(Statement_c::ifBlock($1->exp, *($4->str), $5->statement));}
                  | IfStart RPAREN OScope M Statement CScope ELSE N OScope M Statement	CScope	   {$$ = new utype(Statement_c::ifElseBlock($1->exp, *($4->str), $5->statement, $8->statement, *($10->str), $11->statement)); }
                  | WhileStart RPAREN OScope OWhile M Statement CScope			                     {$$ = new utype(Statement_c::whileBlock(*($1->str), $1->exp, *($5->str), $6->statement));}
                  | BREAK SC													         {VarsSymbolsTable_t->checkWhile(*($1->str));
                                                                              $$ = new utype(Statement_c::breakComm());}
                  | CONTINUE SC												         {VarsSymbolsTable_t->checkWhile(*($1->str));
                                                                              $$ = new utype(Statement_c::continueComm());}

OWhile:         /*epsilon*/                                                {VarsSymbolsTable_t->setWhile();}

IfStart:          IF LPAREN Exp                                            {Statement_c::checkExp($3->exp);
																										$$ = $3;}

WhileStart:       WHILE LPAREN M Exp                                       {Statement_c::checkExp($4->exp);
																										$$ = $4;
																										*($$->str) = *($3->str);}
																										
Call :         ID LPAREN ExpList RPAREN									         {Expression temp_exp = FuncSymbolsTable_t->callFunc(*($1->str), $3->expsVec);
                                                                              $$ = new utype(temp_exp);}
                  | ID LPAREN RPAREN							      				{Expression temp_exp = FuncSymbolsTable_t->callFunc(*($1->str), std::vector<Expression>());
                                                                              $$ = new utype(temp_exp);}

ExpList :         Exp														         	{$$->expsVec = std::vector<Expression>(1, $1->exp);}
                  | Exp COMMA ExpList							      				{$3->expsVec.push_back($1->exp);
																										$$->expsVec = $3->expsVec;}

Type :         INT															            {$$ = new utype(Types_enum::INT_TYPE);}
                  | BYTE													         	{$$ = new utype(Types_enum::BYTE_TYPE);}
                  | BOOL													         	{$$ = new utype(Types_enum::BOOL_TYPE);}
                  | SET LBRACKET NUM DOTS NUM RBRACKET			   			{$$ = new utype(setCheck(yylineno, $3->num, $5->num));}

OScope :       /*epsilon*/                                                 {VarsSymbolsTable_t->addScope();}

CScope :       /*epsilon*/                                                 {VarsSymbolsTable_t->deleteScope();}

Exp :          LPAREN Exp RPAREN								            			{$$ = new utype($2->exp);}
                  | Exp BINOP_MUL_L1 Exp							         		{Expression temp_exp = $1->exp.binopMulDiv($3->exp, *($2->str));
                                                                              $$ = new utype(temp_exp);}
                  | Exp BINOP_ADD_L2 Exp							         		{Expression temp_exp = $1->exp.binopAddSub($3->exp, *($2->str));
                                                                              $$ = new utype(temp_exp);}
                  | ID											            			{Expression temp_exp = VarsSymbolsTable_t->getExp(*($1->str));
                                                                              $$ = new utype(temp_exp);}
                  | Call										         				{Expression temp_exp = $1->exp.call();
                                                                              $$ = new utype(temp_exp);}
                  | NUM											             			{Expression temp_exp = Expression::printNum($1->num, Types_enum::INT_TYPE);
                                                                              $$ = new utype(temp_exp);}
                  | NUM B										         				{Expression temp_exp = Expression::printNum($1->num, Types_enum::BYTE_TYPE);
                                                                              $$ = new utype(temp_exp);}
                  | STRING													            {Expression temp_exp = Expression::handlingString(*($1->str));
                                                                              $$ = new utype(temp_exp);}
                  | TRUE														         {Expression temp_exp = Expression::boolExp(true);
																										$$ = new utype(temp_exp);}
                  | FALSE														         {Expression temp_exp = Expression::boolExp(false);
						                                                            $$ = new utype(temp_exp);}
                  | NOT Exp													         {Expression temp_exp = $2->exp.opNot();
                                                                              $$ = new utype(temp_exp);}
                  | Exp AND M Exp												         {Expression temp_exp = $1->exp.opAnd($4->exp, *($3->str));
                                                                              $$ = new utype(temp_exp);}
                  | Exp OR M Exp												         {Expression temp_exp = $1->exp.opOr($4->exp, *($3->str));
                                                                              $$ = new utype(temp_exp);}
                  | Exp RELOP_GT_1N Exp											   {Expression temp_exp = $1->exp.relop($3->exp, *($2->str));
                                                                              $$ = new utype(temp_exp);}
                  | Exp RELOP_IN Exp											      {Expression temp_exp = $1->exp.in($3->exp);
                                                                              $$ = new utype(temp_exp);}
                  | Exp RELOP_EQ_2L Exp											   {Expression temp_exp = $1->exp.relop($3->exp, *($2->str));
                                                                              $$ = new utype(temp_exp);}
                  | LPAREN Type RPAREN Exp									      {Expression temp_exp = ($4->exp.cast($2->type));
                                                                              $$ = new utype(temp_exp);}

M :            /*epsilon*/                                                 {$$ = new utype(CodeBuffer::instance().genLabel());}

N :            /*epsilon*/                                                 {$$ = new utype(Statement_c::NMarker());}

%%

main(){
   yyparse();

}

int yyerror(char const* s){
   output::errorSyn(yylineno);
   exit(1);
}


